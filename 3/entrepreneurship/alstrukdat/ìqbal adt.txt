Nama: Raizan Iqbal Resi
NIM: 18222068

function isSimetris (l: List) → boolean
{ Menghasilkan true jika List l simetrik. }
{ List disebut simetrik jika:
- elemen pertama = elemen terakhir,
- elemen kedua = elemen sebelum terakhir,
- dan seterusnya.
List kosong adalah List simetris }

Kamus Lokal:
	i : integer

Algoritma:
	i <- 0
	while (i < length(l)/2) do
		if l[i] != l[i] then
			-> False
	-> True


function plusTab (l1,l2: List) → List
{ Prekondisi: l1 dan l2 berukuran sama dan tidak kosong. }
{ Mengirimkan l1+l2, yaitu penjumlahan setiap elemen l1 dan l2
pada indeks yang sama (seperti penjumlahan vektor dalam matematika). }

Kamus Lokal:
	i : integer
	l3 : List

Algoritma:
	CreateList(l3)
	i traversal [0..length(l)-1] 
		l3[i] <- l1[i] + l2[i]
	-> l3
	
function countOccurence(l: List, x: ElType) → integer
{ Menghasilkan berapa banyak kemunculan elemen bernilai x di List l. }
{ Jika l kosong, menghasilkan 0. }

Kamus Lokal:
	i, count : integer

Algoritma:
	count <- 0
	i traversal [0..length(l)-1]
		if l[i] = x do
			count <- count + 1
	-> count



function isEqual (l1,l2:List) → boolean
{ Mengirimkan true jika l1 setara dengan l2, yaitu jika ukuran
l1 sama dengan ukuran l2 dan semua elemen l1 dan l2 pada indeks
yang sama bernilai sama; L1 dan L2 tidak kosong. }


Kamus Lokal:
	i: integer

Algoritma:
	if length(l1) = length(l2) do
		i traversal [0..length(l1)]
			if l1[i] != l2[i]
				-> False
	else do
		-> False
	-> True





function indexOf (l:List, x:ElType) → IdxType
{ Mencari apakah ada elemen List l yang bernilai x. }
{ Jika ada, menghasilkan indeks i terkecil, di mana elemen l ke-i = x.
Jika tidak ada, mengirimkan indeks tak terdefinisi (idxUndef).
Jika list kosong, menghasilkan indeks tak terdefinisi (idxUndef). }
{ Memakai skema searching tanpa boolean. }


Kamus Lokal:
	i, idxUndef : integer

Algoritma:
	if length(l) == 0 do
		-> idxUndef
	else do
		i <- 0
		while (l[i] != x) do
			i <- i + 1
		-> i
	-> idxUndef
	 

procedure insertUnique (input/output l:List, input x:ElType)
{ Menambahkan x sebagai elemen terakhir list l,
pada list dengan elemen unik. }
{ I.S. List l boleh kosong, tetapi tidak penuh
dan semua elemennya bernilai unik, tidak terurut.
F.S. Menambahkan x sebagai elemen terakhir l
jika belum ada elemen yang bernilai x.
Jika sudah ada elemen list yang bernilai x
maka I.S. = F.S. dan dituliskan pesan
“nilai sudah ada”. }

{ Proses : Cek apakah X ada dengan sequential search
dengan sentinel, kemudian tambahkan jika belum ada. }


Kamus Lokal:
	check : boolean
	i : integer
Algoritma:
	check <- False
	i traversal [0..length(l)-1]
		if l[i] = x then
			check <- True
	
	if !check do
		insertLast(l, x)

		
----------------------------------------------------------------------------------------

SOAL 2

----------------------------------------------------------------------------------------

SOAL 3

----------------------------------------------------------------------------------------

SOAL 4

procedure closestPair (input l: List; output p1,p2: ElType)
{ I.S.: l terdefinisi, mungkin kosong, p1 dan p2 sembarang. }
{ F.S.:
Jika l tidak kosong, p1 dan p2 berisi 2 elemen l pada posisi
berurutan yang memiliki selisih (selalu positif) terkecil.
Jika kedua elemen nilainya berbeda, maka p1 adalah elemen yang
bernilai lebih kecil.
Jika ada beberapa pasang elemen yang memiliki selisih terkecil,
maka diambil pasangan elemen yang muncul pertama kali.
Jika l kosong atau hanya terdiri atas 1 elemen, p1 dan p2
berisi elemen tidak terdefinisi yaitu -999 }

Kamus Lokal:
	pair, ElType : ElType
	i : integer
Algoritma:
	p1 <- l[0]
	p2 <- l[1]
	pair <- abs(p1,p2)
	i traversal[1..length(l)-2]
		if abs(l[i] - l[i+1]) < pair then
			pair <- abs(l[i] - l[i+1])
			p1 <- l[i]
			p2 <- l[i+1]
	if p1 > p2 then
		temp <- p1
		p1 <- p2
		p2 <- temp
	Output(p1, p2)


function isFront (l1,l2 : List) → boolean
{ Mengembalikan true jika elemen-elemen l1 merupakan bagian awal dari l2 }

Kamus Lokal:
	i : integer

Algoritma:
	if length(l1) > length(l2) then
		-> False
	else then
		i traversal [0..length(l1)-1]
			if l1[i] != l2[i] then
				-> False
	-> True
		






















































